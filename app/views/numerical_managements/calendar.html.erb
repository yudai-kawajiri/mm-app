<% content_for :title, t('numerical_managements.calendar.title') %>

<%# app/views/numerical_managements/calendar.html.erb %>
<div class="container-fluid py-4">
  <%# ヘッダー部分 %>
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0"><%= t('numerical_managements.calendar.title') %></h1>

    <div class="d-flex align-items-center gap-3">
      <%# 月選択フォーム %>
      <form method="get" class="d-flex align-items-center gap-2">
        <label class="text-muted mb-0"><%= t('numerical_managements.calendar.target_month') %>:</label>
        <input type="month" name="month" value="<%= @selected_date.strftime('%Y-%m') %>" class="form-control form-control-sm" style="width: 150px;">
        <button type="submit" class="btn btn-primary btn-sm"><%= t('numerical_managements.calendar.display') %></button>
      </form>

      <%# ダッシュボードに戻るボタン %>
      <%= link_to t('numerical_managements.calendar.back_to_dashboard'),
                  numerical_managements_path(month: @selected_date.strftime('%Y-%m')),
                  class: "btn btn-outline-secondary btn-sm" %>
    </div>
  </div>

  <%# Turbo Frame %>
  <%= turbo_frame_tag "calendar_content" do %>
    <%# 月間サマリー %>
    <%= render 'monthly_summary', calendar_data: @calendar_data %>

    <%# 予算未設定の警告 %>
    <% unless @budget %>
      <div class="alert alert-warning" role="alert">
        <i class="bi bi-exclamation-triangle"></i> <%= t('numerical_managements.calendar.no_budget_warning') %>
        <a href="#" class="alert-link" data-bs-toggle="modal" data-bs-target="#editBudgetModal">
          <%= t('numerical_managements.calendar.set_budget_link') %>
        </a>
      </div>
    <% end %>

    <%# カレンダーグリッド %>
    <%= render 'calendar_grid', calendar_data: @calendar_data, budget: @budget %>
  <% end %>

  <%# 凡例 %>
  <%= render 'calendar_legend' %>
</div>

<%# 計画データをJavaScriptに渡す %>
<script>
  window.plansByCategory = <%= raw (@plans_by_category || {}).transform_values { |plans| plans.map { |p| { id: p.id, name: p.name, plan_revenue: p.expected_revenue.to_i } } }.to_json %>;
  console.log('plansByCategory 初期化:', window.plansByCategory);
</script>

<%# モーダル群 %>
<%= render 'monthly_budget_modal', selected_date: @selected_date, budget: @budget %>
<%= render 'daily_target_modal' %>
<%= render 'actual_revenue_modal' %>
<%= render 'assign_plan_modal', plans_by_category: @plans_by_category %>

<%# JavaScript %>
<script>
// ★★★ 日別目標編集モーダル ★★★
function setEditModalData(button) {
  const date = button.dataset.date;
  const dateDisplay = button.dataset.dateDisplay;
  const targetId = button.dataset.targetId;
  const targetAmount = button.dataset.targetAmount;

  // 表示用フィールド
  document.getElementById('editTargetDate').value = dateDisplay;

  // hidden field（フォーム送信用）
  document.getElementById('editTargetDateHidden').value = date;

  // 目標金額（整数に変換）
  document.getElementById('editTargetAmount').value = Math.floor(parseFloat(targetAmount) || 0);

  // フォームのaction URLを設定
  const form = document.getElementById('editDailyTargetForm');
  if (targetId) {
    // 既存レコードを更新
    form.action = `/numerical_managements/daily_targets/${targetId}`;
    form.querySelector('input[name="_method"]')?.remove();
    const methodInput = document.createElement('input');
    methodInput.type = 'hidden';
    methodInput.name = '_method';
    methodInput.value = 'patch';
    form.appendChild(methodInput);
  } else {
    // 新規作成
    form.action = '/numerical_managements/daily_targets';
    form.querySelector('input[name="_method"]')?.remove();
  }
}

// ★★★ 実績入力モーダル ★★★
function setActualModalData(button) {
  const date = button.dataset.date;
  const dateDisplay = button.dataset.dateDisplay;
  const planScheduleId = button.dataset.planScheduleId;
  const actualRevenue = button.dataset.actualRevenue || 0;

  // 表示用フィールド
  document.getElementById('editActualDate').value = dateDisplay;

  // hidden field（フォーム送信用）
  document.getElementById('editActualDateHidden').value = date;

  // 実績金額（整数に変換）
  document.getElementById('editActualRevenue').value = Math.floor(parseFloat(actualRevenue) || 0);

  // フォームのaction URLを設定
  const form = document.getElementById('editActualRevenueForm');
  if (planScheduleId) {
    // 既存レコードを更新
    form.action = `/numerical_managements/plan_schedules/${planScheduleId}/actual_revenue`;
    form.querySelector('input[name="_method"]')?.remove();
    const methodInput = document.createElement('input');
    methodInput.type = 'hidden';
    methodInput.name = '_method';
    methodInput.value = 'patch';
    form.appendChild(methodInput);
  }
}

// ★★★ 計画追加モーダル（Bootstrapイベントを使用） ★★★
function initializePlanModal() {
  const assignPlanModal = document.getElementById('assignPlanModal');
  if (!assignPlanModal) {
    console.error('assignPlanModal not found!');
    return;
  }

  // モーダルが開く時のイベントリスナー
  assignPlanModal.addEventListener('show.bs.modal', function(event) {
    const button = event.relatedTarget; // モーダルをトリガーしたボタン
    if (!button) return;

    const date = button.dataset.date;
    const dateDisplay = button.dataset.dateDisplay;

    // 表示用フィールド
    const dateField = document.getElementById('assignPlanDate');
    if (dateField) dateField.value = dateDisplay;

    // hidden field（フォーム送信用）
    const dateHiddenField = document.getElementById('assignPlanDateHidden');
    if (dateHiddenField) dateHiddenField.value = date;

    // カテゴリと計画選択をリセット
    const categorySelect = document.getElementById('assignPlanCategory');
    if (categorySelect) categorySelect.selectedIndex = 0;

    const planSelect = document.getElementById('assignPlanSelect');
    if (planSelect) {
      planSelect.innerHTML = '<option value="">計画を選択</option>';
      planSelect.disabled = true;
    }

    // 計画高をリセット
    const amountInput = document.getElementById('assignPlanAmount');
    if (amountInput) amountInput.value = '';
  });
}

// ★★★ カテゴリ選択時に計画を絞り込む ★★★
function initializePlanSelection() {
  console.log('initializePlanSelection called');
  console.log('window.plansByCategory:', window.plansByCategory);

  const categorySelect = document.getElementById('assignPlanCategory');
  const planSelect = document.getElementById('assignPlanSelect');
  const amountInput = document.getElementById('assignPlanAmount');

  console.log('categorySelect:', categorySelect);
  console.log('planSelect:', planSelect);
  console.log('amountInput:', amountInput);

  if (!categorySelect || !planSelect || !amountInput) {
    console.error('Required elements not found!');
    return;
  }

  categorySelect.addEventListener('change', function() {
    const selectedCategory = this.value;
    console.log('カテゴリ選択:', selectedCategory);

    // 計画選択をリセット
    planSelect.innerHTML = '<option value="">計画を選択</option>';
    planSelect.disabled = true;
    amountInput.value = '';

    if (!selectedCategory) return;

    // 選択されたカテゴリの計画を取得
    const plans = window.plansByCategory[selectedCategory] || [];
    console.log('該当する計画:', plans);

    if (plans.length === 0) {
      planSelect.innerHTML = '<option value="">該当する計画がありません</option>';
      return;
    }

    // 計画の選択肢を追加
    plans.forEach(plan => {
      const option = document.createElement('option');
      option.value = plan.id;
      option.textContent = plan.name;
      option.dataset.amount = plan.plan_revenue;
      planSelect.appendChild(option);
    });

    planSelect.disabled = false;
  });

  // 計画選択時に計画高を自動入力
  planSelect.addEventListener('change', function() {
    const selectedOption = this.options[this.selectedIndex];
    console.log('計画選択:', selectedOption);
    if (selectedOption && selectedOption.dataset.amount) {
      amountInput.value = selectedOption.dataset.amount;
      console.log('計画高設定:', selectedOption.dataset.amount);
    } else {
      amountInput.value = '';
    }
  });
}

// ページ読み込み時に初期化
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOMContentLoaded: plansByCategory =', window.plansByCategory);
  initializePlanSelection();
  initializePlanModal(); // モーダルのイベントリスナーを設定
});

// Turboでページ遷移したときも初期化
document.addEventListener('turbo:load', function() {
  console.log('turbo:load: plansByCategory =', window.plansByCategory);
  initializePlanSelection();
  initializePlanModal(); // モーダルのイベントリスナーを設定
});
</script>
